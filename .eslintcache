[{"/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/index.js":"1","/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/App.js":"2","/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/reportWebVitals.js":"3","/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/serviceWorkerRegistration.js":"4"},{"size":771,"mtime":1609454783927,"results":"5","hashOfConfig":"6"},{"size":5521,"mtime":1609457619040,"results":"7","hashOfConfig":"6"},{"size":364,"mtime":1609196506988,"results":"8","hashOfConfig":"6"},{"size":5064,"mtime":1609196506989,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"5emoic",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/index.js",[],["20","21"],"/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/App.js",["22"],"import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [result, setResult] = useState('');\n  const [uppercaseChecked, setUppercaseChecked] = useState(true);\n  const [lowercaseChecked, setLowerChecked] = useState(false);\n  const [numbersChecked, setNumbersChecked] = useState(false);\n  const [symbolsChecked, setSymbolsChecked] = useState(false);\n  const [passLength, setPassLength] = useState(4);\n  const [canGenerate, setCanGenerate] = useState(false);\n\n  const generatePassword = () => {\n    const password = createPassword();\n\n    setResult(password);\n  };\n\n  const copyPassword = () => {\n    navigator.clipboard.writeText(result);\n  }\n\n  function secureMathRandom() {\n    return (\n      window.crypto.getRandomValues(new Uint32Array(1))[0] /\n      (Math.pow(2, 32) - 1)\n    );\n  }\n  const getRandomUpper = () => {\n    return String.fromCharCode(Math.floor(Math.random() * 26) + 65);\n  };\n  const getRandomLower = () => {\n    return String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  };\n  const getRandomNumber = () => {\n    return String.fromCharCode(Math.floor(secureMathRandom() * 10) + 48);\n  };\n  const getRandomSymbol = () => {\n    const symbols = '~!@#$%^&*()_+{}\":?><;.,';\n    return symbols[Math.floor(Math.random() * symbols.length)];\n  };\n\n  const createPassword = () => {\n    let generatedPassword = \"\";\n\n    const randomArr = {\n      uppercaseChecked: getRandomUpper,\n      lowercaseChecked: getRandomLower,\n      numbersChecked: getRandomNumber,\n      symbolsChecked: getRandomSymbol,\n    };\n\n    const typesCount = uppercaseChecked + lowercaseChecked + numbersChecked + symbolsChecked;\n    const typesArr = [\n      { uppercaseChecked },\n      { lowercaseChecked },\n      { numbersChecked },\n      { symbolsChecked },\n    ].filter((item) => Object.values(item)[0]);\n\n    if (typesCount === 0) {\n      return \"\";\n    }\n\n    for (let i = 0; i < passLength; i++) {\n      typesArr.forEach((type) => {\n        const funcName = Object.keys(type)[0];\n\n        generatedPassword += randomArr[funcName]();\n      });\n    }\n\n    return generatedPassword.slice(0, passLength);\n  };\n\n  React.useEffect(() => {\n    const isChecked = [uppercaseChecked, lowercaseChecked, numbersChecked, symbolsChecked].some(item => item === true);\n    setCanGenerate(isChecked);\n  }, [uppercaseChecked, lowercaseChecked, numbersChecked, symbolsChecked])\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"title\">Password generator</h2>\n\n      <div className=\"result\">\n        <div className=\"result_title field-title\">Generated password</div>\n        {/* <div className=\"result_info right\">click to copy</div>\n        <div className=\"result_info left\">copied</div> */}\n\n        <div className=\"result_viewbox\" id=\"result\">\n          {\n            result\n              ? result\n              : 'CLICK TO GENERATE'\n          }\n        </div>\n\n        <button id=\"copy-btn\" onClick={copyPassword}>\n          <img\n            src={\"https://img.icons8.com/dusk/64/000000/copy.png\"}\n            width=\"70%\"\n            alt=\"Copy Icon\"\n          />\n        </button>\n      </div>\n\n      <div className=\"length range_slider\" data-min=\"4\" data-max=\"32\">\n        <div className=\"length_title field-title\" data-length=\"0\">\n          length: <span>{passLength}</span>\n        </div>\n        <input\n          type=\"range\"\n          id=\"slider\"\n          min=\"4\"\n          value={passLength}\n          onChange={(event) => setPassLength(event.target.value)}\n          max=\"32\"\n          step=\"1\"\n        />\n      </div>\n\n      <div className=\"settings\">\n        <span className=\"setting_title field-title\">setting</span>\n        <div className=\"setting\">\n          <input\n            type=\"checkbox\"\n            id=\"uppercase\"\n            checked={uppercaseChecked}\n            onChange={(event) => setUppercaseChecked(event.target.checked)}\n          />\n          <label htmlFor=\"uppercase\">Include Uppercase</label>\n        </div>\n        <div className=\"setting\">\n          <input\n            type=\"checkbox\"\n            id=\"lowercase\"\n            checked={lowercaseChecked}\n            onChange={(event) => setLowerChecked(event.target.checked)}\n          />\n          <label htmlFor=\"lowercase\">Include Lowercase</label>\n        </div>\n        <div className=\"setting\">\n          <input\n            type=\"checkbox\"\n            id=\"number\"\n            checked={numbersChecked}\n            onChange={(event) => setNumbersChecked(event.target.checked)}\n          />\n          <label htmlFor=\"number\">Include Numbers</label>\n        </div>\n        <div className=\"setting\">\n          <input\n            type=\"checkbox\"\n            id=\"symbol\"\n            checked={symbolsChecked}\n            onChange={(event) => setSymbolsChecked(event.target.checked)}\n          />\n          <label htmlFor=\"symbol\">Include Symbols</label>\n        </div>\n\n        {\n          canGenerate \n            ? <GenerateButton controller={true} controlFunction={() => generatePassword()} />\n            : <GenerateButton controller={false} />\n        }\n      </div>\n    </div>\n  );\n}\n\nconst GenerateButton = ({controller, controlFunction = null}) => {\n  if(controller === true) {\n    return (\n      <button className=\"btn generate\" id=\"generate\" onClick={controlFunction}>\n        Generate Password\n      </button>\n    )\n  } else {\n    return (\n      <button className=\"btn generate\" id=\"generate\" style={{opacity: 0.2, cursor: 'default'}}>\n        Generate Password\n      </button>\n    )\n  }\n}\n\nexport default App;\n","/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/reportWebVitals.js",[],"/Users/nikitamatskovskiy/Desktop/React JS/pass-generator-app/src/serviceWorkerRegistration.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":66,"column":24,"nodeType":"29","messageId":"30","endLine":70,"endColumn":8},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'generatedPassword'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]